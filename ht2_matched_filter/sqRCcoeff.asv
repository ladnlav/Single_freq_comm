% Генерация коэффицентов (импульсной характеристики)для фильтра корень 
% из приподнятого косинуса
%> @file sqRCcoeff.m
% =========================================================================
%> @brief Генерация коэффицентов (импульсной характеристики)для фильтра корень 
%> из приподнятого косинуса
%> @param span Длина фильтра в символах (количество боковых лепестков sinc, 
%> сумма с двух сторон)
%> @param nsamp Число выборок на символ
%> @param rolloff Коэффицент сглаживания (alfa)
%> @return coeff коэффиценты для фильтра корень из приподнятого косинуса
% =========================================================================
function coeff = sqRCcoeff (span, nsamp, rolloff)
    Ts=1;
    
    % Вектор времени    
    t1 = (-span/2):(1/nsamp):(span/2);
    
    coeff = zeros(1, numel(t1));

    % Расчет коэффициентов приподнятого косинуса
    %coeff = 1/Ts.*(sin(pi.*t1./Ts*(1-rolloff))+4*rolloff.*t1./Ts.*cos(pi.*t1./Ts*(1+rolloff)))./(pi.*t1./Ts.*(1-(4*rolloff.*t1./Ts).^2));
    
    for idx=1:numel(t1)
        time=t1(idx);
        if time~=0
            if (time ~= Ts/(4*rolloff)) && (time~= -Ts/(4*rolloff))
                coeff(idx)=1/Ts.*(sin(pi.*time./Ts*(1-rolloff))+ ...
                    4*rolloff.*time./Ts.*cos(pi.*time./Ts*(1+ ...
                    rolloff)))./(pi.*time./Ts.*(1-(4*rolloff.*time./Ts).^2));
            else
                coeff(idx)=rolloff/(Ts*sqrt(2))*((1+2/pi)*sin(pi/4/rolloff) ...
                    +(1-2/pi)*cos(pi/4/rolloff));
            end
        else
            coeff(idx)=1/Ts*(1+rolloff*(4/pi-1));
        end
    end

%     for idx = 1:length(t1)
%         time = t1(idx);
%         
%         switch time
%             case 0
%                 coeff(idx) = 1/Ts*(1+rolloff*(4/pi-1));
%                 
%             case {Ts/(4*rolloff), -Ts/(4*rolloff)}
%                 coeff(idx) = 1/Ts*(1+rolloff*(4/pi-1));
%                 
%             otherwise
%                 coeff(idx) = 1/Ts * (sin(pi * time / Ts * (1-rolloff)) + ...
%                     4 * rolloff * time / Ts * cos(pi * time / Ts * (1+rolloff))) / ...
%                     (pi * time / Ts * (1 - (4 * rolloff * time / Ts)^2));
%         end
%     end

    % Normalize the filter to have unit energy
    coeff(abs(coeff)<10e-16)=0;
    coeff = coeff / sqrt(sum(coeff(coeff>10e-16).^2));

    txfilter1 = comm.RaisedCosineTransmitFilter('RolloffFactor', rolloff, ...
                                           'FilterSpanInSymbols',span,...
                                           'OutputSamplesPerSymbol', nsamp);
    check1 = coeffs(txfilter1);
    
    figure();
    plot(coeff);
    hold on;
    plot(check1.Numerator);



%     rc = cos(pi * rolloff * t) ./ (1 - (2 * rolloff * t).^2);
% 
% 
%     coeff=rc;
end